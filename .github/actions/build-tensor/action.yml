name: Build Tensor
description: Build PHP Tensor Extension
inputs:
  version:
    description: PHP Version
    required: true
  ts:
    description: Thread Safe
    required: true
  repo:
    description: Repository
    required: true
  arch:
    description: Architecture
    required: true
  enable:
    description: Enabling command line parameter
    required: true
  name:
    description: Extension name
    required: true

runs:
  using: "composite"
  steps:
    - name: Cache PHP SDK
      id: cache-php-sdk
      uses: actions/cache@v3
      with:
        path: |
          php-sdk
          php-dev
          php-bin
        key: setup-php-sdk-${{ inputs.version }}-${{ inputs.ts }}-${{ inputs.arch }}

    - name: Setup PHP
      if: ${{ steps.cache-php-sdk.outputs.cache-hit != 'true' }}
      id: setup-php
      uses: cmb69/setup-php-sdk@v0.7
      with:
        version: ${{ inputs.version }}
        arch: ${{ inputs.arch }}
        ts: ${{ inputs.ts }}

    - name: Compute toolset version
      shell: pwsh
      id: toolset
      run: |
        $toolsets = @{
            "vc14" = "14.0"
        }
        $dir = vswhere -latest -find "VC\Tools\MSVC"
        foreach ($toolset in (Get-ChildItem $dir)) {
            $tsv = "$toolset".split(".")
            if ((14 -eq $tsv[0]) -and (9 -ge $tsv[1])) {
                $toolsets."vc14" = $toolset
            } elseif ((14 -eq $tsv[0]) -and (19 -ge $tsv[1])) {
                $toolsets."vc15" = $toolset
            } elseif ((14 -eq $tsv[0]) -and (29 -ge $tsv[1])) {
                $toolsets."vs16" = $toolset
            } elseif (14 -eq $tsv[0]) {
                $toolsets."vs17" = $toolset
            }
        }
        $toolset = $toolsets."vs16"
        
        Add-Content $Env:GITHUB_PATH "$pwd\php-sdk\bin"
        Add-Content $Env:GITHUB_PATH "$pwd\php-sdk\msys2\usr\bin"
        Add-Content $Env:GITHUB_PATH "$pwd\php-bin"
        Add-Content $Env:GITHUB_PATH "$pwd\php-dev"
        Write-Output "toolset=$toolset" >> $Env:GITHUB_OUTPUT
        Write-Output "prefix=$pwd\php-bin" >> $Env:GITHUB_OUTPUT
        Write-Output "vs=vs16" >> $Env:GITHUB_OUTPUT

    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ inputs.arch }}
        toolset: ${{ steps.toolset.outputs.toolset }}

    - name: Get Extension Source
      shell: pwsh
      run: |
        git clone https://github.com/${{matrix.repo}} \projects\tensor

    - name: Cache OpenBLAS
      id: cache-openblas
      uses: actions/cache@v3
      with:
        path: \projects\tensor\deps
        key: openblas-0.3.21-x64

    - name: Download OpenBLAS
      shell: pwsh
      if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
      run: |
        curl -LO https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-x64.zip
        7z x OpenBLAS-0.3.21-x64.zip -o"\projects\tensor\deps"
        copy \projects\tensor\deps\bin\libopenblas.dll \projects\tensor\deps\lib\libopenblas.dll

    - name: Fix lapack.h for PHP
      if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        $lapack_file = "\projects\tensor\deps\include\lapack.h"
        (Get-content $lapack_file) | Foreach-Object {$_ -replace "float _Complex", "_C_float_complex"} | Set-Content $lapack_file
        (Get-content $lapack_file) | Foreach-Object {$_ -replace "double _Complex", "_C_double_complex"} | Set-Content $lapack_file

    - name: Configure Extension
      shell: pwsh
      run: |
        cd \projects\tensor\ext
        phpize
        ./configure --${{matrix.enable}} --with-prefix=${{steps.toolset.outputs.prefix}}

    - name: Fix Makefile for PHP
      shell: pwsh
      run: |
        $makefile_file = "\projects\tensor\ext\Makefile"
        (Get-content $makefile_file) | Foreach-Object {$_ -replace "bcrypt.lib", "bcrypt.lib \projects\tensor\deps\lib\libopenblas.lib \projects\tensor\deps\lib\libopenblas.dll.a"} | Set-Content $makefile_file

    - name: Build Extension
      shell: pwsh
      run: |
        cd \projects\tensor\ext
        nmake

    - name: Package Extension
      shell: pwsh
      run: |
        md install
        copy ext/${{matrix.arch}}/${{matrix.release}}/php_${{matrix.name}}.dll install/php${{matrix.version}}_${{matrix.ts}}_${{matrix.arch}}_${{matrix.name}}.dll

    - name: Release
      shell: bash
      run: |
        set -x
        if ! gh release view ${{ inputs.name }}; then
          gh release create "${{ inputs.name }}" "install/php${{ inputs.version }}_${{ inputs.ts }}_${{ inputs.arch }}_${{ inputs.name }}.dll" -t "${{ inputs.name }}" -n "${{ inputs.name }}"
        else
          gh release upload "${{ inputs.name }}" "install/php${{ inputs.version }}_${{ inputs.ts }}_${{ inputs.arch }}_${{ inputs.name }}.dll" --clobber
        fi
